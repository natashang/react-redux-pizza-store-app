{"version":3,"sources":["utils/getLinkInfo.js","components/Home.js","utils/centerStyle.js","components/presentation/PrevNextButtons.jsx","components/Customer.js","redux/actions/index.js","components/Crust.js","components/Sauce.js","components/Toppings.js","utils/links.js","components/Display.js","App.js","serviceWorker.js","redux/reducers/order.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getLinkInfo","arrOfLinks","linkName","i","length","name","Home","currLink","links","progress","ProgressBar","animated","now","to","next","Button","label","href","centerStyle","PrevNextButtons","props","Container","style","Row","Col","prev","plabel","onClick","handleButtonClick","nlabel","connect","state","_order","order","dispatch","addCustomer","data","type","payload","email","phone","address","useState","setData","handleInput","event","target","value","Form","Label","Control","onChange","e","addCrust","crust","id","map","key","Check","custom","currentTarget","addSauce","sauce","addToppings","toppings","handleAddTopping","topping","console","log","tmp","push","handleDeleteTopping","index","splice","handleToppings","Customer","Crust","Sauce","Toppings","resetApp","Table","bordered","t","App","Card","border","width","Body","link","exact","path","component","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2ed3486.chunk.js","sourcesContent":["/**\r\n * Iterates through all possible in-app links for the correct link info object.\r\n * Helper function\r\n * \r\n * @param {*} arrOfLinks all link information, from links.js\r\n * @param {*} linkName the component's link name, from links.js\r\n * @returns {Object} the object from the array corresponding to this component's link\r\n */\r\nconst getLinkInfo = (arrOfLinks, linkName) => {\r\n    for (let i = 0; i < arrOfLinks.length; i++){\r\n        if (arrOfLinks[i].name === linkName)\r\n            return arrOfLinks[i]\r\n    }\r\n}\r\n\r\n// TODO: i.e. 'Add Customer' becomes hard coded, maybe COMP_NAME='Add Customer'?\r\n\r\nexport default getLinkInfo","import React from 'react'\r\nimport { ProgressBar, Button} from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\nconst Home = () => {\r\n    const currLink = getLinkInfo(links, 'Home')\r\n    const progress = currLink.progress\r\n\r\n    return(\r\n        <div>\r\n                <ProgressBar animated now = {progress}/>\r\n\r\n                <h1>Pizza Delivery Shop</h1>\r\n                <p>Welcome! Build your own pizza in seconds! We offer a wide selection of locally sourced ingredients. We also do delivery! </p>\r\n\r\n                <Link to={currLink.next}>\r\n                    <Button>{currLink.label}</Button>\r\n                </Link> \r\n\r\n                <br />\r\n                <p>\r\n                    This project is hosted on GitHub Pages and is available for viewing.\r\n                    <a href=\"https://github.com/natashang/react-redux-pizza-store-app\">View code here</a>    \r\n                </p>\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Home","const centerStyle = {\r\n    'display':'flex',\r\n    'alignItems': 'center',\r\n    'justifyContent':'center'\r\n}\r\nexport default centerStyle","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Button, Container, Row, Col} from 'react-bootstrap'\r\n\r\nimport centerStyle from '../../utils/centerStyle'\r\n\r\nconst PrevNextButtons = (props) => {\r\n    return(\r\n        <Container style={centerStyle}>\r\n        <Row>\r\n            <Col>\r\n                <Link to={props.prev}>\r\n                    <Button>\r\n                        {props.plabel}\r\n                    </Button>\r\n                </Link>\r\n            </Col>\r\n            \r\n            <Col>\r\n                <Link to={props.next}>\r\n                    <Button onClick= {props.handleButtonClick} >\r\n                        {props.nlabel}\r\n                    </Button>\r\n                </Link>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n    )\r\n   \r\n}\r\n\r\nexport default PrevNextButtons","import React, {useState} from 'react'\r\nimport {ProgressBar, Form } from 'react-bootstrap'\r\n\r\nimport PrevNextButtons from './presentation/PrevNextButtons'\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\n// for redux\r\nimport { connect } from 'react-redux'\r\nimport { addCustomer } from '../redux/actions/index'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\n// Use destructuring {} to pass in functions as a prop\r\nconst Customer = ( { addCustomer } ) => {\r\n    \r\n    // Hooks\r\n    // variable names line up with the input field names\r\n    const [data, setData] = useState({\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        address:''\r\n    })\r\n\r\n    const currLink = getLinkInfo(links, 'Add Customer')\r\n    const progress = currLink.progress\r\n    \r\n    // data is the payload passed into the action creator function addCustomer()\r\n    const handleButtonClick = () => {\r\n        // console.log('[3. Event handler] ', data)\r\n        addCustomer(data)\r\n    }\r\n\r\n    /**\r\n     * Applies the useState hook's update function on the stateful value, data\r\n     * \r\n     * @param {*} event \r\n     * @returns {Object} passes the input field's value into the correct state value\r\n     *      - data: { name, email, phone, address }\r\n     */\r\n    const handleInput = event => {\r\n        // c.log(\"event: \", event.target.value)\r\n        setData(\r\n            {\r\n                ...data,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        )\r\n    }   \r\n    \r\n    return(\r\n        <div>\r\n            <ProgressBar animated now = {progress}/>\r\n\r\n            <h1>Enter customer information</h1>\r\n\r\n            <Form>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={data.name}\r\n                        onChange = { e=> handleInput(e)}\r\n                    />\r\n                    {/* <Form.Control.Feedback\r\n                        type=\"invalid\"\r\n                    >\r\n                        Please enter your name.\r\n                    </Form.Control.Feedback> */}\r\n               \r\n                <Form.Label> Email: </Form.Label>\r\n                <Form.Control \r\n                        type=\"email\" \r\n                        name=\"email\"\r\n                        value={data.email}\r\n                        onChange= {e => handleInput(e)}\r\n                />\r\n                {/* <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                >\r\n                    Please enter your email.\r\n                </Form.Control.Feedback> */}\r\n\r\n                <Form.Label> Phone:  </Form.Label>\r\n                <Form.Control \r\n                    type=\"text\" \r\n                    name=\"phone\"\r\n                    value={data.phone}\r\n                    onChange= {e => handleInput(e)}\r\n                />\r\n                {/* <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                >\r\n                    Please enter your phone number.\r\n                </Form.Control.Feedback> */}\r\n\r\n                <Form.Label> Address: </Form.Label>\r\n                <Form.Control \r\n                    type=\"text\" \r\n                    name=\"address\"\r\n                    value={data.address}\r\n                    onChange= {e => handleInput(e)}\r\n                />\r\n                {/* <Form.Control.Feedback\r\n                    type=\"invalid\"\r\n                >\r\n                    Please enter your address.\r\n                </Form.Control.Feedback> */}\r\n                </Form>\r\n\r\n                <br />\r\n\r\n                <PrevNextButtons\r\n                    prev = {currLink.prev}\r\n                    plabel = {currLink.plabel}\r\n                    next = {currLink.next}\r\n                    nlabel = {currLink.nlabel}\r\n                    handleButtonClick={handleButtonClick}\r\n                />\r\n        </div>\r\n    )  \r\n}\r\n\r\n\r\n/**\r\n * Using the connect() from react-redux to select the part of the store \r\n * the connected component needs.\r\n * \r\n * @param {*} state - Receives the entire store state\r\n * @return {*} An object with data this component needs. \r\n *      - Destructuring: assigns to a local _order object from the order reducer \r\n */\r\nconst mapStateToProps = state => {\r\n    // console.log('[1. State of the store, mapStateToProps ]', state)\r\n    return {\r\n        _order:state.order\r\n    }\r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to dispatch actions to the store.\r\n * Triggers a state change.\r\n * Dispatches the result of an action creator to the store by\r\n * implicity forwarding arguments to the specified action creator.\r\n* \r\n * @param {*} dispatch \r\n * @returns {Object}  action creator addCustomer()\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    // console.log('[. Dispatching to store, mapDispatchToProps ]', dispatch)\r\n    return {\r\n        addCustomer: data => dispatch(addCustomer(data))\r\n    }\r\n}\r\n\r\n/**\r\n * React-Redux connect() function generates wrapper components \r\n * that handle the process of interacting with the Redux store.\r\n * @param {function} mapStateToProps\r\n * @param {function} mapDispatchToProps\r\n */\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Customer)","\r\n/* action types */\r\nexport const ADD_CUSTOMER = 'ADD_CUSTOMER'\r\nexport const ADD_CRUST    = 'ADD_CRUST'\r\nexport const ADD_SAUCE    = 'ADD_SAUCE'\r\nexport const ADD_TOPPINGS = 'ADD_TOPPINGS'\r\nexport const DISPLAY_ORDER = 'DISPLAY_ORDER'\r\nexport const RESET_APP    = 'RESET_APP'\r\n\r\n/* action creators */\r\n// in ES6: const addCustomer = data => {\r\nexport function addCustomer(data){\r\n    return{\r\n        type: ADD_CUSTOMER,\r\n        payload:{\r\n            name: data.name,\r\n            email: data.email,\r\n            phone: data.phone,\r\n            address: data.address\r\n        }\r\n    }\r\n}\r\n\r\nexport function addCrust(data){\r\n    return{\r\n        type:ADD_CRUST,\r\n        payload:{\r\n            crust: data.crust\r\n        }\r\n    }\r\n}\r\n\r\nexport function addSauce(data){\r\n    return{\r\n        type: ADD_SAUCE,\r\n        payload:{\r\n            sauce: data.sauce\r\n        }\r\n    }\r\n}\r\n\r\nexport function addToppings(data){\r\n    return{\r\n        type: ADD_TOPPINGS,\r\n        payload:{\r\n            toppings: data.toppings\r\n        }\r\n    }\r\n}\r\n\r\nexport function displayOrder(data){\r\n    return{\r\n        type: DISPLAY_ORDER,\r\n        payload:data\r\n    }\r\n}\r\n\r\nexport function resetApp(){\r\n    return{\r\n        type:RESET_APP,\r\n        payload: ''\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport {ProgressBar, Form} from 'react-bootstrap'\r\n\r\nimport PrevNextButtons from './presentation/PrevNextButtons'\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\n// for redux\r\nimport { connect } from 'react-redux'\r\nimport { addCrust } from '../redux/actions/index'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\n// Use destructuring {} to pass in functions as a prop\r\nconst Crust = ({ addCrust }) => {\r\n    \r\n    // all possible crust options to be selected\r\n    const crusts = [\r\n        {id: 1, name: 'regular'},\r\n        {id: 2, name: 'thin'},\r\n        {id: 3, name: 'thick'},\r\n        {id: 4, name: 'gluten-free'}\r\n    ]\r\n\r\n    // Hooks\r\n    const [data, setData] = useState({\r\n        crust:''\r\n    })\r\n\r\n    const currLink = getLinkInfo(links, 'Add Crust')\r\n    const progress = currLink.progress\r\n\r\n    // data is the payload passed into the action creator function addCrust()\r\n    const handleButtonClick = () => {\r\n        // console.log('[3. Event handler] ' + data)\r\n        addCrust(data)\r\n    }\r\n\r\n    /**\r\n     * Applies the useState hook's update function on the stateful value, data\r\n     * \r\n     * @param {*} event \r\n     * @returns {Object} passes the input field's value into the correct state value\r\n     *      - data: { crust }\r\n     */\r\n    const handleInput = event => {        \r\n        // console.log(\"[HANDLE INPUT]: \", event.currentTarget.value)\r\n        setData(\r\n            {\r\n                ...data,\r\n                [event.target.name]:event.currentTarget.value\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <ProgressBar animated now = {progress}/>\r\n\r\n            <h1>Select a crust type</h1>\r\n\r\n            <Form>\r\n                {crusts.map( crust => {\r\n                    return(\r\n                        <div key={crust.id}>\r\n                                <Form.Check \r\n                                    custom\r\n                                    id={crust.id}\r\n                                    type=\"radio\" \r\n                                    name=\"crust\" // enables only one selected\r\n                                    label={crust.name}\r\n                                    value={crust.name} \r\n                                    onChange = {e => handleInput(e)}\r\n                                />                        \r\n                        </div>\r\n                    )}\r\n                )}\r\n            </Form>\r\n            \r\n            <br />\r\n\r\n            <PrevNextButtons\r\n                    prev = {currLink.prev}\r\n                    plabel = {currLink.plabel}\r\n                    next = {currLink.next}\r\n                    nlabel = {currLink.nlabel}\r\n                    handleButtonClick={handleButtonClick}\r\n                />\r\n    </div>\r\n    )  \r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to select the part of the store \r\n * the connected component needs.\r\n * \r\n * @param {*} state - Receives the entire store state\r\n * @return {*} An object with data this component needs. \r\n *      - Destructuring: assigns to a local _order object from the order reducer \r\n */\r\nconst mapStateToProps = state => {\r\n    // console.log('[1. State of the store, mapStateToProps ]', state)\r\n    return {\r\n        _order:state.order\r\n    }\r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to dispatch actions to the store.\r\n * Triggers a state change.\r\n * Dispatches the result of an action creator to the store by\r\n * implicity forwarding arguments to the specified action creator.\r\n* \r\n * @param {*} dispatch \r\n * @returns {Object}  action creator addCrust()\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    // console.log('[. Dispatching to store, mapDispatchToProps ]', dispatch)\r\n    return {\r\n        addCrust: data => dispatch(addCrust(data))\r\n    }\r\n}\r\n\r\n/**\r\n * React-Redux connect() function generates wrapper components \r\n * that handle the process of interacting with the Redux store.\r\n * @param {function} mapStateToProps\r\n * @param {function} mapDispatchToProps\r\n */\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Crust)","import React, { useState} from 'react'\r\nimport {ProgressBar, Form} from 'react-bootstrap'\r\n\r\nimport PrevNextButtons from './presentation/PrevNextButtons'\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\n// for redux\r\nimport { connect } from 'react-redux'\r\nimport { addSauce } from '../redux/actions/index'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\n// Use destructuring {} to pass in functions as a prop\r\nconst Sauce = ( {addSauce }) => {\r\n    \r\n    // all possible sauce options to be selected\r\n    const sauces = [\r\n        {id: 1, name: 'tomato'},\r\n        {id: 2, name: 'marinara'},\r\n        {id: 3, name: 'olive oil'},\r\n        {id: 4, name: 'none'}\r\n    ]\r\n\r\n    // Hooks\r\n    const [data, setData] = useState({\r\n        sauce:''\r\n    })\r\n\r\n    const currLink = getLinkInfo(links, 'Add Sauce')\r\n    const progress = currLink.progress\r\n\r\n    // data is the payload passed into the action creator function addSauce()\r\n    const handleButtonClick = () => {\r\n        // console.log('[3. Event handler] ' + data)\r\n        addSauce(data)\r\n    }\r\n\r\n    /**\r\n     * Applies the useState hook's update function on the stateful value, data\r\n     * \r\n     * @param {*} event \r\n     * @returns {Object} passes the input field's value into the correct state value\r\n     *      - data: { sauce }\r\n     */\r\n    const handleInput = event => {\r\n        // console.log(\"[HANDLE INPUT]: \", event.currentTarget.value)\r\n        setData(\r\n            {\r\n                ...data,\r\n                [event.target.name]: event.currentTarget.value\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <ProgressBar animated now = {progress}/>\r\n\r\n            <h1>Select your sauce</h1>\r\n\r\n            <Form>\r\n                {sauces.map( sauce => {\r\n                    return(\r\n                        <div key={sauce.id}>\r\n                            <Form.Check \r\n                                custom\r\n                                id={sauce.id}\r\n                                type=\"radio\" \r\n                                name=\"sauce\"\r\n                                label={sauce.name}\r\n                                value={sauce.name} \r\n                                onChange = { e => handleInput(e)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                    })\r\n                }\r\n            </Form>\r\n\r\n            <br />\r\n            \r\n            <PrevNextButtons\r\n                    prev = {currLink.prev}\r\n                    plabel = {currLink.plabel}\r\n                    next = {currLink.next}\r\n                    nlabel = {currLink.nlabel}\r\n                    handleButtonClick={handleButtonClick}\r\n                />\r\n        </div>\r\n    )  \r\n}\r\n\r\n\r\n/**\r\n * Using the connect() from react-redux to select the part of the store \r\n * the connected component needs.\r\n * \r\n * @param {*} state - Receives the entire store state\r\n * @return {*} An object with data this component needs. \r\n *      - Destructuring: assigns to a local _order object from the order reducer \r\n */\r\nconst mapStateToProps = state => {\r\n    // console.log('[1. State of the store, mapStateToProps ]', state)\r\n    return {\r\n        _order:state.order\r\n    }\r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to dispatch actions to the store.\r\n * Triggers a state change.\r\n * Dispatches the result of an action creator to the store by\r\n * implicity forwarding arguments to the specified action creator.\r\n* \r\n * @param {*} dispatch \r\n * @returns {Object}  action creator addSauce()\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    // console.log('[. Dispatching to store, mapDispatchToProps ]', dispatch)\r\n    return {\r\n        addSauce: data => dispatch(addSauce(data))\r\n    }\r\n}\r\n\r\n/**\r\n * React-Redux connect() function generates wrapper components \r\n * that handle the process of interacting with the Redux store.\r\n * @param {function} mapStateToProps\r\n * @param {function} mapDispatchToProps\r\n */\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Sauce)","import React, { useState } from 'react'\r\nimport {ProgressBar, Form} from 'react-bootstrap'\r\n\r\nimport PrevNextButtons from './presentation/PrevNextButtons'\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\n// for redux\r\nimport { connect } from 'react-redux'\r\nimport { addToppings } from '../redux/actions/index'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\n// Use destructuring {} to pass in functions as a prop\r\nconst Toppings = ({ addToppings }) => {\r\n\r\n    // FUTURE TODO: add costs for each topping\r\n    // all possible toppings options to be selected\r\n    const toppings = [\r\n        {id: 1, name: 'pepperoni'},\r\n        {id: 2, name: 'sausage'},\r\n        {id: 3, name: 'pineapple'},\r\n        {id: 4, name: 'mango'},\r\n        {id: 5, name: 'potato'},\r\n        {id: 6, name: 'red pepper'},\r\n        {id: 7, name: 'mushrooms'},\r\n        {id: 8, name: 'parmesean'}\r\n    ]\r\n\r\n    // Hooks\r\n    const [data, setData] = useState({\r\n        toppings: []\r\n    })\r\n\r\n    const currLink = getLinkInfo(links, 'Add Toppings')\r\n    const progress = currLink.progress\r\n\r\n    const handleToppings = (topping, event) => {\r\n        // console.log(\"in handletoppings, topping = \", topping)\r\n\r\n        let tmp = [...data.toppings]\r\n        let index = -1\r\n\r\n        // has this option been selected yet\r\n        for (let i = 0; i < tmp.length; i++){\r\n            if (tmp[i].name === topping.name)\r\n                index = i\r\n        }\r\n\r\n        // if not in toppings[], add()\r\n        if (index === -1)\r\n            handleAddTopping(topping)\r\n\r\n        // else, delete() at that index\r\n        else\r\n            handleDeleteTopping(topping, index)\r\n    }\r\n\r\n    /**\r\n     * Applies the useState hook's update function on the stateful value, data\r\n     * \r\n     * @param {*} event \r\n     * @returns {Object} passes the input field's value into the correct state value\r\n     *      - data: { toppings: [] }\r\n     */\r\n    const handleAddTopping = topping => {\r\n        console.log(\"in handleadd, topping = \", topping.name)\r\n        \r\n        let tmp = [...data.toppings]\r\n        tmp.push(topping)\r\n        setData(\r\n            {\r\n                ...data,\r\n                toppings:tmp\r\n            }\r\n        )\r\n    }\r\n\r\n   /**\r\n    * Deletes a topping from the list of selected toppings\r\n    * @param {Object} topping \r\n    * @param {*} event \r\n    * @returns a modified stateful data object via the useState hook\r\n    */\r\n    const handleDeleteTopping = (topping, index) => {\r\n        console.log(\"in handledelete, topping = \", topping.name, \"index =\", index)        \r\n        let tmp = [...data.toppings]\r\n        tmp.splice(index, 1)\r\n\r\n        setData(\r\n            {\r\n                ...data,\r\n                toppings:tmp\r\n            }\r\n        )       \r\n    }\r\n   \r\n    // data is the payload passed into the action creator function addCrust()\r\n    const handleButtonClick = () => {\r\n        // console.log('[3. Event handler] ' , data)\r\n        addToppings(data)\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <ProgressBar animated now = {progress}/>\r\n\r\n            <h1>Select your toppings</h1>\r\n            \r\n            <Form>\r\n                {toppings.map( topping => {\r\n                    return(\r\n                       <div key = {topping.id}>\r\n                           <Form.Check\r\n                                custom\r\n                                id={topping.id}\r\n                                type=\"checkbox\"\r\n                                name=\"topping\"\r\n                                label={topping.name}\r\n                                value={topping.name}\r\n                                onChange = {event => handleToppings(topping, event)}\r\n                            />\r\n                       </div>\r\n                    )\r\n                })\r\n                }\r\n            </Form>\r\n\r\n            <br />\r\n            \r\n            <PrevNextButtons\r\n                    prev = {currLink.prev}\r\n                    plabel = {currLink.plabel}\r\n                    next = {currLink.next}\r\n                    nlabel = {currLink.nlabel}\r\n                    handleButtonClick={handleButtonClick}\r\n                />\r\n        </div>\r\n    )  \r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to select the part of the store \r\n * the connected component needs.\r\n * \r\n * @param {*} state - Receives the entire store state\r\n * @return {*} An object with data this component needs. \r\n *      - Destructuring: assigns to a local _order object from the order reducer \r\n */\r\nconst mapStateToProps = state => {\r\n    // console.log('[1. State of the store, mapStateToProps ]', state)\r\n    return {\r\n        _order:state.order\r\n    }\r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to dispatch actions to the store.\r\n * Triggers a state change.\r\n * Dispatches the result of an action creator to the store by\r\n * implicity forwarding arguments to the specified action creator.\r\n * \r\n * @param {*} dispatch \r\n * @returns {Object}  action creator addToppings()\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    // console.log('[. Dispatching to store, mapDispatchToProps ]', dispatch)\r\n    return {\r\n        addToppings: data => dispatch(addToppings(data))\r\n    }\r\n}\r\n\r\n/**\r\n * React-Redux connect() function generates wrapper components \r\n * that handle the process of interacting with the Redux store.\r\n * @param {function} mapStateToProps\r\n * @param {function} mapDispatchToProps\r\n */\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Toppings)\r\n","\r\nimport Home from '../components/Home'\r\nimport Customer from '../components/Customer'\r\nimport Crust from '../components/Crust'\r\nimport Sauce from '../components/Sauce'\r\nimport Toppings from '../components/Toppings'\r\nimport Display from '../components/Display'\r\n\r\n/*\r\n    name     : corresponds to the React view component name\r\n    label    : text on UI components (buttons)\r\n    component: assigns the specific React view component for that address\r\n    path     : URL address that appears in the browser address bar\r\n    next     : URL address to redirect the application to\r\n*/\r\nconst links = [\r\n    {\r\n        'id'       : 1,\r\n        'name'     :'Home',\r\n        'label'    :\"Click here to begin\",\r\n        'component': Home, \r\n        'path'     :'/',\r\n        'next'     :'/addcustomer',\r\n        'progress' : 0\r\n    },\r\n    {\r\n        'id'       : 2,\r\n        'name'     :'Add Customer',\r\n        'component': Customer,\r\n        'prev'     :'/',\r\n        'path'     :'/addcustomer',\r\n        'next'     :'/addcrust',\r\n        'plabel'   :'Back',\r\n        'nlabel'    :'Next',\r\n        'progress' : 20\r\n    },\r\n    {\r\n        'id'       : 3,\r\n        'name'     :'Add Crust',\r\n        'component': Crust,\r\n        'prev'     :'/addcustomer',\r\n        'path'     :'/addcrust',\r\n        'next'     :'/addsauce',\r\n        'plabel'   :'Back',\r\n        'nlabel'    :'Next',\r\n        'progress' : 40\r\n    },\r\n    {\r\n        'id'       : 4,\r\n        'name'     :'Add Sauce',\r\n        'label'    :'Next : Toppings --> ',\r\n        'component': Sauce,\r\n        'prev'     :'/addcrust',\r\n        'path'     :'/addsauce',\r\n        'next'     :'/addToppings',\r\n        'plabel'   :'Back',\r\n        'nlabel'    :'Next',\r\n        'progress' : 60\r\n\r\n    },\r\n    {\r\n        'id'       : 5,\r\n        'name'     :'Add Toppings',\r\n        'label'    :'Display My Order!',\r\n        'component': Toppings,\r\n        'prev'     :'/addsauce',\r\n        'path'     :'/addtoppings',\r\n        'next'     :'/display',\r\n        'plabel'   :'Back',\r\n        'nlabel'    :'Next',\r\n        'progress' : 80\r\n\r\n    },\r\n    {\r\n        'id'       : 6,\r\n        'name'     :'Display Order',\r\n        'label'    :'Done',\r\n        'component': Display,\r\n        'prev'     :'/addtoppings',\r\n        'path'     :'/display',\r\n        'next'     :'/',   \r\n        'plabel'   :'Back',\r\n        'nlabel'    :'Finish',     \r\n        'progress' : 100\r\n    }\r\n]\r\nexport default links","import React from 'react'\r\nimport {ProgressBar, Table} from 'react-bootstrap'\r\n\r\nimport PrevNextButtons from './presentation/PrevNextButtons'\r\nimport getLinkInfo from '../utils/getLinkInfo'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {resetApp} from '../redux/actions/index'\r\n\r\nimport links from '../utils/links'\r\n\r\n\r\n// Use destructuring {} to pass in a state's reducer function (order) as a props\r\nconst Display = ({ _order, resetApp }) => {  \r\n   \r\n    const currLink = getLinkInfo(links, 'Display Order')\r\n    const progress = currLink.progress\r\n\r\n    return(\r\n        <div>\r\n            <ProgressBar animated now = {progress}/>\r\n\r\n            <h1>Here's your final order</h1>\r\n            \r\n            <Table bordered>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Name</td>\r\n                    <td>{_order.name}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Email</td>\r\n                    <td>{_order.email}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Phone</td>\r\n                    <td>{_order.phone}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Address</td>\r\n                    <td>{_order.address}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Pizza Crust</td>\r\n                    <td>{_order.crust}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Pizza Sauce</td>\r\n                    <td>{_order.sauce}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Pizza Toppings</td>\r\n                    <td>\r\n                        <ul>\r\n                        {\r\n                            _order.toppings.map( t => {\r\n                                return(\r\n                                    <li key = {t.id}>\r\n                                        {t.name}\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                        </ul>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </Table>            \r\n            \r\n            <PrevNextButtons\r\n                    prev = {currLink.prev}\r\n                    plabel = {currLink.plabel}\r\n                    next = {currLink.next}\r\n                    nlabel = {currLink.nlabel}\r\n                    handleButtonClick={resetApp}\r\n                />\r\n        </div>\r\n    )  \r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to select the part of the store \r\n * the connected component needs.\r\n * \r\n * @param {*} state - Receives the entire store state\r\n * @return {*} An object with data this component needs. \r\n *      - Destructuring: assigns to a local _order object from the order reducer \r\n */\r\nconst mapStateToProps = state => {\r\n    // console.log('[DISPLAY 1. State of the store, mapStateToProps ]', state)\r\n    return {\r\n        _order:state.order\r\n    }\r\n}\r\n\r\n/**\r\n * Using the connect() from react-redux to dispatch actions to the store.\r\n * Triggers a state change.\r\n * Dispatches the result of an action creator to the store by\r\n * implicity forwarding arguments to the specified action creator.\r\n * \r\n * @param {*} dispatch \r\n * @returns {Object}  action creator addToppings()\r\n */\r\nconst mapDispatchToProps = dispatch => {\r\n    // console.log('[DISPLAY. Dispatching to store, mapDispatchToProps ]', dispatch)\r\n    return { resetApp: () => dispatch(resetApp())}\r\n}\r\n\r\n/**\r\n * React-Redux connect() function generates wrapper components \r\n * that handle the process of interacting with the Redux store.\r\n * @param {function} mapStateToProps\r\n */\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Display)","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch, \n  Route\n} from 'react-router-dom'\nimport { Card } from 'react-bootstrap'\n\nimport links from './utils/links'\nimport centerStyle from './utils/centerStyle'\n\nfunction App() {\n  return (\n    <div style={centerStyle}>\n      <Card border=\"primary\" style={{ width: '50rem'}}>\n        <Card.Body>\n          <Router>\n            <Switch>\n              {links.map(link => {\n                return(\n                  <Route \n                    exact\n                    path = {link.path} \n                    component = {link.component}\n                    key = {link.id}    \n                    />\n                )\n              })}\n            </Switch>\n          </Router>\n        </Card.Body>\n      </Card>    \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    ADD_CUSTOMER, DISPLAY_ORDER, RESET_APP,\r\n    ADD_CRUST, ADD_SAUCE, ADD_TOPPINGS\r\n} from '../actions/index'\r\n\r\nconst initialState = {\r\n    \r\n}\r\n\r\nfunction order (state = initialState, action) {\r\n    // console.log('[5. ORDER-REDUCER]: ', 'STATE', state,\r\n    //             'ACTION: ', action)\r\n\r\n    switch(action.type){\r\n        case ADD_CUSTOMER:\r\n            // console.log('[ACTION]: add customer', action.payload)\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        case DISPLAY_ORDER:\r\n            // console.log(\"[ACTION]: display order\", action.payload)\r\n            return state\r\n\r\n        case ADD_CRUST:\r\n            // console.log(\"[ACTION] add crust\", action.payload)\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        \r\n        case ADD_SAUCE:\r\n            // console.log(\"[ACTION] add sauce\", action.payload)\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        \r\n        case ADD_TOPPINGS:\r\n            // console.log(\"[ACTION] add toppings\", action.payload)\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        case RESET_APP:            \r\n            // console.log(\"[ACTION] reset app\", action.payload)\r\n            return {\r\n                ...initialState\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default order","import {combineReducers} from 'redux'\r\nimport order from './order'\r\n\r\nexport default combineReducers({\r\n    order\r\n})","import {createStore} from 'redux'\r\nimport reducers from './reducers/index'\r\n\r\nconst store = createStore(\r\n    reducers, /* preloadedState,*/\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n)\r\n\r\n\r\n\r\nexport default store\r\n/*\r\nimport {\r\n    addCustomer, addCrust, addSauce, addToppings, displayOrder\r\n  } from './actions/index'\r\n  const store = createStore(reducers)\r\n  \r\n  // Log the initial state\r\n  console.log(store.getState())\r\n  \r\n  // Every time the state changes, log it\r\n  // Note that subscribe() returns a function for unregistering the listener\r\n  const unsubscribe = store.subscribe(() => console.log(store.getState()))\r\n  \r\n  // Dispatch some actions\r\n  store.dispatch(addCustomer('sample customer'))\r\n  store.dispatch(addCrust('sample crust'))\r\n  store.dispatch(addSauce('sample sauce'))\r\n  store.dispatch(addToppings('sample topping a, sample b'))\r\n  store.dispatch(displayOrder('sample order'))\r\n  \r\n  // Stop listening to state updates\r\n  unsubscribe()\r\n\r\n// testing purposes\r\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n    , \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}